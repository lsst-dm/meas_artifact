

README for meas_artifact


Satellite Detection/Masking Code
--------------------------------

The layout of the package should look something like this (examples of usage follow):

$ tree
.
|-- bin
|   |-- combineSatellitePickles.py           
|   |-- findKnownSatellites.py               # main development/testing script
|   |-- plotTrails.py                        
|   |-- poolSatellite.py                     # run satellite detection on calexps as a batch job
|   `-- runSatellite.py                      # run satellite detection on calexps as CmdLineTask
|-- doc
|   `-- README                               # this document
|-- python
|   `-- lsst
|       |-- __init__.py
|       `-- meas
|           |-- __init__.py
|           `-- artifact
|               |-- __init__.py
|               |-- candidates.py            # List of known artifacts in (mainly COSMOS) data
|               |-- colors.py                # print to stdout in color
|               |-- hough.py                 # code relating to Hough Transform
|               |-- mapreduce.py             # A simple map-reduce used in findKnownSatellites.py
|               |-- momentCalculator.py      # Class to manage computed moments.
|               |-- satelliteDebug.py        # Debug plot functions
|               |-- satelliteFinder.py       # The main SatelliteFinder class.
|               |-- satelliteTask.py         # Code for CmdLineTask and PoolTask
|               |-- satelliteTrail.py        # SatelliteTrail class to contain detections
|               `-- satelliteUtils.py        # Utility functions for satellite detection.
|-- tests
|   `-- testSatellite.py                     # unit tests
`-- ups
    `-- meas_artifact.table


By and large, the bin/ scripts should almost never be needed for
anything.  They were written for development purposes.  The code is
contained in a CmdLineTask, and can be run on Exposure objects from
the pipeline.  The CmdLineTask was needed during development to run on
calexp images directly.  It may be useful if a particular trail is not
being detected, or some other feature is being detected as a trail,
but otherwise it shouldn't be needed.



========================================================
=
= Bin scripts
=
========================================================


#### runSatellite.py and poolSatellite.py

This runs like any other pipeline script, but it works on calexps.  So
you have to have the single-frame data already on disk to use this.
Here's an example for a bright trail in visit 1236, ccd 65.

$ runSatellite.py /data1/Subaru/HSC/rerun/bick/cosmos333/ --id visit=1236 ccd=65 -c debugType=fits,trail -L DEBUG

The 'debugType' argument controls which debugging outputs are written.
A debugDir argument determines where they're written, with
'$PWD/data/' as the default.  Valid values are:

- 'fits':  write the FITS file after masking the trail
- 'trail': write the SatelliteTrail object in a pickle
- 'plot':  write a diagnostic plot showing the moment parameters and detected pixels (WARNING - *slow*)

If you want to run a big batch job, poolSatellite.py works just like
e.g. reduceFrames.py.  This example runs all the COSMOS data I used
for testing:

$ poolSatellite.py /lustre/Subaru/SSP/rerun/bick/cosmos333/ --id visit=242^244^246^248^250^254^256^258^260^262^264^266^268^270^272^1166^1168^1170^1172^1174^1176^1178^1180^1182^1184^1186^1188^1190^1192^1194^1202^1204^1206^1208^1210^1212^1214^1216^1218^1220^1222^1228^1230^1232^1236^1238^1240^1242^1244^1246^1248^1886^1888^1890 --nodes 8 --procs 12 --job satellite


#### findKnownSatellites.py

This script is used to load a collection of info about known satellite
trails and run the calexps to see if the algorithm can detect them
correctly.  The known trails are stored as SatelliteTrail objects in
candidates.py.  There are two candidate sets defined, 'all' (about 800
in total) and 'short' (12).  The full set includes a number of control
frames which contain now satellite or aircraft trail.

Here's how to run the 'short' set:

$ findKnownSatellites.py /data1/Subaru/HSC/rerun/bick/cosmos333/ -c short -j 12

The trails are classified as:

'satellite'   - probably a satellite trail ... steady brightness ... about the width of the PSF
'aircraft'    - probably an out-of-focus aircraft ... 40-100 pixels width, very faint.
'moustache'   - arc-shaped ghost artifact, typically 50-80 pixels wide ... only in edge CCDs
'swallow'     - swallow tail ghost.
'diffraction' - A diffraction spike associated with a bright star.
'empty'       - control CCD containing no artifact.
'unknown'     - A real false-positive.  Detection found in a test run, but it's not clear what it is.
'scattered'   - scattered light.  Most of these are unmasked bleeds from bright stars.
'meteor'      - probably a meteor ... varying brightness ... a bit wider than the PSF.


The stats are pretty dodgy here.  I've tried to compute 'precision'
and 'recall', but pinning down true-positive, false-positive,
true-negative, false-negative is tricky when you aren't sure what's
there.  I tried identifying trails by eye ahead of time, but I found
the algorithm often picked-up things that I had missed.  So, I suspect
there are a few trails in the data set that recorded as
true-negatives, when they're actually false-negatives.

By default, the script will load the calexps and run the algorithm,
but it also stores all the results (-o outfile).  You can run the
script using results from a previous run as input (-i infile) to look
more carefully at statistics from a specific kind of trail (-k kind
[from the above list]).


#### combineSatellitePickles.py and plotTrails.py


These two are used to collect and plot the results from
runSatellites.py (or poolSatellites.py).  Each visit,ccd can dump a
pickle containing the SatelliteTrailList and a bit of other
information.  The 'combine' script just loads those pickles and writes
them as a single pickle.  It also has the option to print
SatelliteTrails, so you can also use it to print results from a run to
stdout.

E.g. Write to file 'dump.pickle', and (-v) print to stdout.

$ combineSatellitePickles.py data/1236/trails01236-065.pickle -o dump.pickle -v


Plot can then be used to overplot a trail on an image.

$ ./bin/plotTrails.py /lustre/Subaru/SSP/rerun/bick/cosmos333 dump.pickle

The input file can be either a pickle, or a text file with space-separated columns:

<visit>  <ccd>  <r>  <theta>  <width>



========================================================
=
= Modules
=
========================================================

NOTE: Most of the functions and classes described here have examples in the test script:

tests/testSatellite.py

The main class which does detection is the SatelliteFinder.  There's a
SatelliteFinderTask which wraps it to handle Config and allow it to be
used as a Task.

The main algorithm is the HoughSatelliteTask, which inherits from a
SatelliteTask.  It contain two target versions of the
SatelliteFinderTasks, one to search for narrow trails (PSF-width), and
one to search for broad trails (aircraft width).

HoughSatelliteTask(SatelliteTask)
    'narrow' = SatelliteFinderTask (calls SatelliteFinder.getTrails() with 'narrow' configuration)
    'broad'  = SatelliteFinderTask (calls SatelliteFinder.getTrails() with 'broad' configuration)


There's also a toy Task called AnotherSatelliteTask which just uses
the 'narrow' configuration as a place holder.  This is included as a
demo for how someone could write their own *SatelliteTask.  The main
requirement is a method runSatellite() which calls something that
returns a SatelliteTrailList.  So, another algorithm should be fairly
easy to add later.


========================================================
=
= Classes and Functions
=
========================================================

Here's a brief list of classes and functions defined in the modules:

lsst/meas/artifact/candidates.py:
    class Candidate(object)
    -- A container for candidates detections used in testing.
    
lsst/meas/artifact/momentCalculator.py:
    class MomentManager(object)
    -- Manage 1st,2nd,3rd moments measured by cross-correlation
    class MomentLimit(object)
    -- Specify the valid range (or upper/lower limit) for a given moment
    class PixelSelector(list)
    -- A container for the limits to be applied to the moments.
       Limits are applied as hard cuts
    class PValuePixelSelector(PixelSelector)
    -- Another container for the limits to be applied to the moments.
       Limits are a sum of log(p), and a cut is made to keep most probable ones.

lsst/meas/artifact/satelliteFinder.py:
    class SatelliteFinder(object)
    -- The main work horse, and where most of the algorithm is written.

lsst/meas/artifact/satelliteTrail.py:
    class SatelliteTrail(object)
    -- The main container for results, but also knows how to add itself to an
       image and is therefore used to create calibration trails, and to
       set Mask pixels when a trail is found.
    class SatelliteTrailList(list)
    -- A list of SatelliteTrails, with some summery info in attributes.
    class ConstantProfile(object)
    -- A callable object to get the profile shape of a trail
       (constant in this case)
    class DoubleGaussianProfile(object)
    -- A callable object to get the profile shape of a trail
       (A double-Gaussian in this case)

    
lsst/meas/artifact/satelliteTask.py:
    class SatelliteFinderConfig(pexConfig.Config)
    class SatelliteFinderTask(pipeBase.Task)
    -- Task to wrap a SatelliteFinder
    
    class SatelliteConfig(pexConfig.Config)
    class SatelliteTask(pipeBase.CmdLineTask)
    -- Base Task for Satellite detection

    class HoughSatelliteConfig(SatelliteConfig)
    class HoughSatelliteTask(SatelliteTask)
    -- Derived class with current implementation
    
    class AnotherSatelliteConfig(pexConfig.Config)
    class AnotherSatelliteTask(SatelliteTask)
    -- Derived example class, should someone add a new algorithm
    
    class PoolSatelliteConfig(pexConfig.Config)
    class PoolSatelliteTask(basePara.BatchPoolTask)
    -- Batch wrappers for HoughSatelliteTask


lsst/meas/artifact/satelliteUtils.py:
    def angleCompare(theta1, theta2, tolerance)
    -- compare two angles, but handle wrap
    def getExposurePsfSigma(exposure, minor=False)
    -- helper to get the PSF sigma from an exposure
    def separableCrossCorrelate(data, vx, vy)
    -- 2d cross-correlate with vectors vx, vy (separably)
    def smooth(img, sigma):
    -- Gaussian smooth.
    def medianRing(img, radius, width):
    -- Smooth (filter) with a median ring.
    def momentConvolve2d(data, k, sigma, middleOnly=False):
    -- Do the cross-correlation for all the moments.

    
lsst/meas/artifact/mapreduce.py:
    class MapFunc(object)
    -- Wrap up python's multiprocessing.
    
lsst/meas/artifact/hough.py
    class HoughSolutionList(list)
    -- A namedtuple to return results from the HoughTransform
    class HoughTransform(object)
    -- Compute the Hough transform

    def hesseForm(thetaIn, x, y)
    -- convert to r,theta format (Hesse Normal Form)
    def twoPiOverlap(thetaIn, arrays=None, overlapRange=0.2)
    -- wrap angles by duplicating some points near 0 and 2pi
    def thetaAlignment(theta, x, y, limit=3, tolerance=0.15, maxSeparation=None)
    -- ID strong candidates based on pair-wise theta values being the same.
    def improveCluster(theta, x, y)
    -- Extrapolate r,theta coordinates along their derivative to get a better cluster.
    def hesseBin(r0, theta0, bins=200, rMax=4096, thresh=40)
    -- Do the 2D binning in r,theta and get peaks.
    
    
bin/findKnownSatellites.py
    class EventList(list)
    -- A container for managing stats for candidates and detections